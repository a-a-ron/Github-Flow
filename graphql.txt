Introduction to GraphQL - 30 Minutes

Introduction - Why GraphQL (Facebook problem to be solved. Mobile views)
REST vs GraphQL
  - Get exactly what you asked for
  - Nesting
  - Strong typed
  - Introspective
  - No versioning
Queries - View like templates (get requests)
Mutations (POST, PUT, DELETE requests)
Pagination
Variables
Fragments - DRY


--
Understand
- Edges
- Nodes - A single object to query.
- Connections

----
Why GraphQL (Facebook)

Problem trying to solve was mobile. They have mobile apps at the time (html5) apps, but what users really wanted was a rich native application and needed an API to power that. Existing APIs wouldn't work at the time that they had. If we werebuilding out this client, what would be want. How do we think about the product. 


Why GitHiub choose GraphQL

Getting the data you want takes multiple REST API calls. Integrating with a RESTfull API to retrieve a field value often results in a series of requests. You could have an ID that is used in the endpoint to get another ID that is used for another endpoint to get the data you're looking for.

It's difficult to relase comprehensive REST responses that don't expose too much data that's too expensive to calculate. It's hard to descide how much data to provide because some data can be expensive to calculate and you may not care. Chances are that you're just looking for a an ID, a name, or link. 

---

#### Intro to GraphQL

Field - a unit of data you can retrieve from an object. "The GraphQL query language is basically about selecting fields on objects."

Connection - connections let you query related objects as part of the same call. With connections, you can use a single call where you would have to use multiple call to a REST API. It's helpful to picture a graph: dots connected by lines. The dots are nodes, the lines are edges. A connection defines a relationship between the nodes. 

Edge - Edges represent connections between nodes. When you query a connection, you traverse its edges to get to its nodes. Every "edges" field has a "node" field and a "cursor" field. Cursors are used for pagination.

Node - A node is a generic term for an object. You can look up a node directly, or you can access related nodes via a connection. If you specify a "node" that does not return a "scalar", you must include subfields until all fields return scalars.

Arguments - a set of key-value pairs attached to a specific field. Mutations require an input object as an argument. 

Scalar - Primitive values: "INT", "FLOAT", "STRING", "BOOLEAN", "ID". 

Introdpective - GraphQL is introspective. This means you can query a GraphQL schema for details about itself. 

## Mutations - Often require information that you can only find out by performing a query first. A query to get an issueID, and a mutation to add an emoji reaction to the issue. (You can include both a query and a mutation in the same explorer window provided names "FindIssueID", "AddReactionToIssue", the operations will be executed as separate calls to the GraphQL endpoint. It's not possible to perform a query at the same time as a mutation.)

query FindIssueID {
  repository(owner:"a-a-ron", name:"github-flow"){
    issue(number:13) {
      id
    }
  }
}

*
{
  "data": {
    "repository": {
      "issue": {
        "id": "MDU6SXNzdWUyODc1MzI5OTY="
      }
    }
  }
}
*

mutation AddReactionToIssue {
  addReaction(input:{subjectId:"MDU6SXNzdWUyODc1MzI5OTY=", content:HOORAY}) {
    reaction {
      content
    }
    subject {
      id
    }
  }
}

*
{
  "data": {
    "addReaction": {
      "reaction": {
        "content": "HOORAY"
      },
      "subject": {
        "id": "MMDU6SXNzdWUyODc1MzI5OTY="
      }
    }
  }
}
*

Task: Add an emoji reaction to an issue. 

Search the schema documentation for the mutation we want to use. We see the "addReaction" mutation with the description, "Adds a reaction to a subject". Perfect. 

3 Input fields
- clientMutationId "string"
- subjectId "ID!"
- content "ReactionContent!"

! = Required fields
Content - specify which emoji to use.
subjectID - The way to identify which issue to add the reaction to.

Let's examine this line-by-line

"query FindIssueID" - Here we are stating that we're performing a query, essentailly a "GET" request, and we name it "FindIssueID". Naming is optional but allows us to include it in the same explorer window as the mutation. This then allows us to choose which action to perform.

"repository(owner:"a-a-ron", name:"GraphQL-Demo"){" - We specify the repository by querying the "repository" object and passing the "owner" and "name" arguments. 

"issue(number:13) {" - We specify the issue we want to add the reaction to by querying the "issue" object and passing a "number" argument. 

id - We are then requesting the "ID" of the issue that will be used to identify the issue in our mutation to add the emoji reaction.  

#### Mutation Query

Now that we know the ID we can proceed with the mutation.

"mutation AddReactionToIssue {" - We perform a mutation by using the word mutation and then issuesing a name. As with queries, naming a mutation is optional but nice so that we can have mutliple mutations and queries in the same explorer window. 

"addReaction(input:{subjectId:"MDU6SXNzdWUyODc1MzI5OTY=", content:HOORAY}) {" - This next line has a lot of information so let's break it down.

"addReaction" - this is the name of the mutation and is a set value in the API. 

"input" - the input is the required argument "key". For a mutation, the argument key will always be a mutation.

"{subjectId:"MDU6SXNzdWUyODc1MzI5OTY=", content:HOORAY})" - Since the mutation takes an arguement key, we need to provide the required argument value that is an input object.  This is composed of the input fields "subjectID", "content", and the values.  
The rest of the call is the payload object where we specify what data we want the server to return after we've ran the mutation. This information, as well as information of other valid fields and values are listed in the documentation. 

In this example, we want the two required fields returned "reaction" and "subject", both of which have reuqired subfields "content" and "id". 

At this point, we can check out our reaction to the issue






#### Forming Calls with GraphQL

REST has numerous enpdoints, the GraphQL API has only one "https://api.github.com/graphql". This endpoint remains constant no matter what operation is performed. 






query FindIssueID {
  repository(owner:"a-a-ron", name:"github-flow"){
    issues(first:1) {
      edges{
        node{
          id
          title
        }
      }
    }
  }
}





















