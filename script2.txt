Course Outline

Introduction to GitHub - Get Started with GitHub in less than an hour!

TL;DR - Use the GitHub flow to create branches, make commits, and introduce changes with Pull Requests. Mange communications in issues and manage GitHub notifications. 

Title Card: Use the Learn starting card with the Learn logo and titles. Walkthrough: Introduction to GitHub.

Introduction:

Hi! Welcome to this walkthrough video on the Introduction to GitHub course on GitHub Learn! If you're looking for a quick and fun introduction to GitHub, well, you've found it. In this course, you'll learn what GitHub is and why it's so powerful. You'll learn how to perform some important actions to become familiar with GitHub by actually using Github. In this course, you'll learn and use the GitHub flow to create branches, make commits, and introduce changes by using pull requests. You'll also learn how to use issues for discussions and collaboration. 

People around the world use GitHub to collaborate and contribute on projects ranging from software, to policy documents and even cookbooks. You can share you projects with the world and invite your friends to help, or you can keep your projects private and still have easy access wherever you are. GitHub is used to build some of the most powerful applications in the world. It can do a lot of really cool things, but this course will focus on getting you started with the basics. So, let's dig into issues, collaborate with branches, and change code on GitHub by using the GitHub flow. So, let's take a minute to understand what the GitHub flow is.

GitHub Flow:

1) The flow starts by creating a branch off of master. When you create a branch in your project, it's copying that project from that point in time into a parallel enrionment where you can try out new ideas and introduce changes without affecting the "master" branch. 

** add callout note saying that branch names should be descriptive to others know what the feature branch is **

2) After the branch has been created, the next step is to make the changes you want to incorporate into the master branch by making a "commit". A commit can be made by adding, modifying, or deleting content contained in the project's files. When making a commit you also add a commit message as a brief summary of what changes have occured. A commit can just be one small change, or it can be several changes grouped together in one commit. However, as a best practice, it's usually better to make lots of smaller commits instead of fewer commits with lots of changes. You'll understand why in just a second. 

3) Once you're satisfied with the commits you've made, it's time to open a pull request. A pull request is saying that you're wanting to incorporate your commit changes from this feature branch into the master branch. Creating a pull request is also inviting other collaboraters to discuss and review the commits you've made. Which, brings us to the next step in the GitHub flow.

4) With the opening of a pull request, disscussion and review of your commits can now take place. For those reviewing your commits, they have full visibility to the changes you're making, and can comment to the pull request generally, or can get as granular as commenting on a specific line of code or content change in each file. This is a great way to insure that these commits are following project guidelines or any specific coding styles. You can then make new commits based off discussions and comments given. It's very common to see back and forth comments and commits after a pull request has been opened. It's also much easier for someone to review small changes being introduced in multip[le commits instead of lots of changes in one commit. 

After you're satisifed with your pull request and it's been reviwed and has passed any tests, it's time to deploy your changes and verify them in production. If for some reason your changes cause issues, you can always revert back by deploying the existing master back into production. 

If everything checks out and your changes are verified in production, you can merge your feature branch into the master branch. When merged, your pull request makes a merge commit which preserves a historical record of that action on the master branch. This merge commit is similar to a commit you made in your feature branch by recording the changes made for that commit, but it's a commit on the master branch that references the merge of this pull request. Becasue all of these commits are searchable, Git is very transparent when understanding the history of a project. 

And that's the GitHub flow! It's pretty simple but very efficent. Now that we understand the GitHub flow, let's dive into this course with a hands-on approach and see how the GitHub flow works in action. To first get started, let's navigate to the Introduction to GitHub course homepage where we can register for the course. 

<Show Introduction to Github main page> SCREENFLOW

You'll notice a couple green buttons to register for the course. It doesn't matter which one you click, so feel free to click either one. <pause 3 sec>. Once clicked, you'll see a popup window appear on your screen. GitHub Learn will need to create a new repository on your GitHub account. This repository will be the "Introduction to Github" course. You have the option to make this repository public or private. For this course, making the repository public is the most common approach, but you do have the option to make it private. Note that making the repository private requires a paid GitHub account. 

Once you've chosen your option, 





