Course Outline

Introduction to GitHub - Get Started with GitHub in less than an hour!

TL;DR - Use the GitHub flow to create branches, make commits, and introduce changes with Pull Requests. Mange communications in issues and manage GitHub notifications. 

Title Card: Use the Learn starting card with the Learn logo and titles. Walkthrough: Introduction to GitHub.

Introduction:

Hi! Welcome to this walkthrough video on the Introduction to GitHub course on GitHub Learning Lab! If you're looking for a quick and fun introduction to GitHub, well, you've found it. In this course, you'll learn what GitHub is and why it's so powerful. You'll learn how to perform some important actions to become familiar with GitHub by actually using Github. In this course, you'll learn and use the GitHub flow to create branches, make commits, and introduce changes by using pull requests. You'll also learn how to use issues for discussions and collaboration. 

People around the world use GitHub to collaborate and contribute on projects ranging from software, to policy documents and even cookbooks. You can share you projects with the world and invite your friends to help, or you can keep your projects private and still have easy access wherever you are. GitHub is used to build some of the most powerful applications in the world. It can do a lot of really cool things, but this course will focus on getting you started with the basics. So, let's dig into issues, collaborate with branches, and change code on GitHub by using the GitHub flow. So, let's take a minute to understand what the GitHub flow is.



<<<Already done>>>

GitHub Flow:

1) The flow starts by creating a branch off of master. When you create a branch in your project, it's copying that project from that point in time into a parallel enrionment where you can try out new ideas and introduce changes without affecting the "master" branch. 

** add callout note saying that branch names should be descriptive to others know what the feature branch is **

2) After the branch has been created, the next step is to make the changes you want to incorporate into the master branch by making a "commit". A commit can be made by adding, modifying, or deleting content contained in the project's files. When making a commit you also add a commit message as a brief summary of what changes have occured. A commit can just be one small change, or it can be several changes grouped together in one commit. However, as a best practice, it's usually better to make lots of smaller commits instead of fewer commits with lots of changes. You'll understand why in just a second. 

3) Once you're satisfied with the commits you've made, it's time to open a pull request. A pull request is saying that you're wanting to incorporate your commit changes from this feature branch into the master branch. Creating a pull request is also inviting other collaboraters to discuss and review the commits you've made. Which, brings us to the next step in the GitHub flow.

4) With the opening of a pull request, disscussion and review of your commits can now take place. For those reviewing your commits, they have full visibility to the changes you're making, and can comment to the pull request generally, or can get as granular as commenting on a specific line of code or content change in each file. This is a great way to insure that these commits are following project guidelines or any specific coding styles. You can then make new commits based off discussions and comments given. It's very common to see back and forth comments and commits after a pull request has been opened. It's also much easier for someone to review small changes being introduced in multip[le commits instead of lots of changes in one commit. 

After you're satisifed with your pull request and it's been reviwed and has passed any tests, it's time to deploy your changes and verify them in production. If for some reason your changes cause issues, you can always revert back by deploying the existing master back into production. 

If everything checks out and your changes are verified in production, you can merge your feature branch into the master branch. When merged, your pull request makes a merge commit which preserves a historical record of that action on the master branch. This merge commit is similar to a commit you made in your feature branch by recording the changes made for that commit, but it's a commit on the master branch that references the merge of this pull request. Becasue all of these commits are searchable, Git is very transparent when understanding the history of a project. 

And that's the GitHub flow! It's pretty simple but very efficent. Now that we understand the GitHub flow, let's dive into this course with a hands-on approach and see how the GitHub flow works in action. To first get started, let's navigate to the Introduction to GitHub course homepage where we can register for the course. 

<<<already done>>>



<Show Introduction to Github main page> SCREENFLOW

You'll notice a couple green buttons to join this course. It doesn't matter which one you click, so feel free to click either one. <pause 3 sec>. Once clicked, you'll see a popup window appear on your screen. GitHub Learning Lab will need to create a repository named github-slideshow on your GitHub account. You have the option to make this repository public or private. For this course, making the repository public is the most common approach, but you do have the option to make it private. Note that making the repository private requires a paid GitHub account. 

Once you've chosen your option, you'll be directed to the Introduction to GitHub progress page. A green "Success" notification should appear at the top of your page to let you know that you've registered for the course and that a new repository has been created.  You'll also notice that the course steps to complete this course are listed on this page. The first step is to "Assign the first issue to yourself". Let's click on the green start button to get started with the first step. 

Step #1: Assign yourself 

You should now be re-directed to an "issue" in your newely created "github-slideshow" repository under your github profile name. An issue can be opened to have a discussion or collaborate on anything related to this repository. Keep in mind that issues are only discussions, they do not modify the contents of a file or files inside your repository. Discussions can start out as issues and then be linked to a Pull request where the changes are actually made. In this course, we'll be navigating frequently between issues (the instructions and discussions) and pull requests (the actual changes being made), so getting used to this format is helpful in completing this course. GitHub learning lab will help you along the way by giving instructions on next steps as well as provide feedback to your actions.

The first thing you'll see is a comment from Github-learning-lab, welcoming you to the introduction to GitHub course. This is great! you've now begun your journey to learn GitHub by actually using GitHub. Earlier, you breiefly learned what GitHub is and how it can be useful. If you click on the expandable dialogue arrow of "What is GutHub", you get a little more information and a very cool video to watch at the bottom if you're wanting even more. For now, it's important to know that GitHub is a collaboration platform built upon Git which is the distributed version control software that tracks every change you make to your project. 

Below this, you'll see a few more expandable dialogue arrows. One for exploring a githuib repository, and another for using GitHub's issues. Feel free to click on those resources to learn more.

The last expandable dialogue is for managing notifications. Once you've commented on an issue or pull request, email notifications will start to pour in. By default, notifications will be sent by email to any activity in the thread. This can be helpful but can quickly become overwhelming. GitHub allows you to silence or unmute notifications of individual issues and pull requests. You can customize notifications in settings by going to your profile icon and click Settings then notifications. You can also choose to receive notificaionts from a repository by watching, not watching, or ignoring notifications. You can then review notifications for the repositories you are already watching. As with the other sections, there is a video for addtional information on notifications if you want to learn more.<pause 3>

Scrolling down you'll see your first task of assigning this issue to yourself. By assigning yourself to an issue or pull request, you're telling other collaboraters that you'll be managing this discussion or code change. Let's assign yourself to this issue. If you scroll up to the right side of the screen, under the assignees section, click on "assign yourself". You should now see your username and profile picture appear. You can now scroll down to the bottom of the issue and refresh the page. You should now see a new response from github-learning-lab letting you know that you are now the proud manager of this issue.


Step #2: Turn on GitHub Pages

Your next task is to turn on GitHub pages. GitHub pages is a technology that allows you to serve a static web site from a repository. GitHub-learning-lab as already filled this repository with some fun website content, but the rendered site isn't visible from anywhere right now. So, let's change that. 

You can do this by going to the "settings" tab for the repository by clicking the "settings" link in the comment of this issue. You'll now be directed to the settings tab for this repository. Scroll down to the section that says "GitHub Pages" and under the "Source" dropdown that says NONE, select the option that says "Master branch", and then click the "save" button. Once done, you can now return back to the issue for more instructions. You can do this by clicking on the "Issues" tab in the top menu bar.<pause3> Click on the issues that says "Getting Started with GitHub" <pause 3> 

Scrolling down you now see that github-learning-lab has confirmed that GitHub pages is now turned on for this repository and that you can visit your website that is now visible to the public. Nice!  

Step #3: Close an Issue

Now that you've completed the tasks in this issue, the next step is to close it. You can do this by clicking the "close issue" button located at the bottom of the issue.<pause 2> 

You now get another message from the github-learning-lab notifying you that this issue thread has been compelted and to head on over to the next issue for more instructions. You can click on the "next issue" link in the comment to take you to the next issue. <pause 3>


Step #4: Create a branch

You've now be brought to the second issue where Github-learning-lab has provided some new instructions for our next step. Now that you're familair with working with issues, and you already know what the Github flow is. It's time to put our knowelege of the GitHub flow to the test. However, if you feel like you need to go over it again, you can click on this video link to watch a great video on the GitHub flow. In our next step, we'll be creating a branch from our project. Remember, a branch is a complete copy of our project that allows us to test out new ideas or make changes to our project withough affecting the "master" branch of the project in the process. Keep in mind that we'll be navigating between our issues with the github-learning-lab responses, where the instructions are,  and our soon to be created pull request, where the actual changes will be made. 

Our next step is to create a branch. Let's navigate to the code tab at the top left of the page.<pause 3> Now that you're on the code page, you'll see a list of folders and files inside your repository. To create a new branch, locate the "branch" dropdown button just above the folders and files. Currently, the branch button says "master". This is the branch you are currently checked out on. To create a new branch, click on the button to bring up the text field. In this field, type the name of the branch you want to create. It's usually good practice to name your branch in relation to the changes will you be making. In your case, you can name the branch. "my-first-branch" and then hit enter. <pause 5>

You should now see a notification appear at the top of the page that says "branch created". You'll also noticed that in the branch button, it now says "my-first-branch" instead of master. 

Let's now navigate back over to our issue for futher instructions. We can do this by clicking on the "issues" tab next to the code tab. <pause 5> Click on the issue that says, "your first contribution" to open up that issue. <pause 5> If you scroll down to the bottom of page you'll now see that github-learning-lab has provided you with a new step to follow. Congratulations on creating your first branch!

Step #5: Commit a file

Now that your branch has been created, you can use it to make modifications to our project without changing the deployed or "master" branch. If you remembner from the GitHub flow, the next step after creating a branch is to make a commit. It's time to create a new file and commit it to your branch. The first instruction is to return back to the "code" tab, but before you do so, select and copy the information in step 5, you'll be using this is just a minute. <pause 3> Navigate back to the code tab located in the top menu bar <pause 3> 

In the branch dropdown-menu button, change master to the name of your branch, "my-first-branch".<pause 2> To the right of this button, you'll see another button that says "create new file". Click on this button to add a new file to your branch. <pause 3> Next to the github-slideshow repository name, you'll see a text field where we can add the file name that you want created. Following the instructions in the issue, you'll need to create a file in the "_posts" with the name "0000-01-02-YOUR-USERNAME.md". I'll but putting my username, which is a-a-ron, but remember to put you username instead of mine. <pause 5> 

You can now add the following content to the body of your file. Paste the content from step 5 in the previous issue.<pause 3>


You are now ready to commit this to your branch. You can do this by scrolling down to the bottom of the page where it says Commit new file. the first text box, is our commit message. This is a breif description of the changes being made in this commit. You can type something like, "Add" and then the name of your file <pause 8>. you'll want to make sure you're commiting to your "my-first-branch" and not the master branch. You can now click on the green "commit new file" button at the bottom. 

Step #6: Open a pull request

You're now taken back to the code tab where you'll see a new notification appear. You'll notice that your branch, "my-first-branch" is one commit ahead of master. This means that you've committed something to this branch. Now that you've made the commit, navigate back to the issue to see your next instructions. Click on the issues tab in the top menu, and then the issue titled "your fist contribution". <pause 3> 

Scrolling down to the bottom of the page you have a new comment from github-learning-lab. Awesome, you've successfully made a commit on your branch! Your next instructions are to open a pull request, give it a name, a description, and then click the "create pull request" button. GitHub-learning-lab also mentioned that once you create your pull reuqest, it will close this issue and communicate with you over there. Alright, time for you to create your first pull request.

Let's go back to the code tab and click the "compare & pull reuqest" button  for our branch. <pause 5> Under the compare changes section, make sure the "base" branch is on master, and that the compare: branch says your branch name "my-first-branch".

Let's now give your pull request a title. The insructions recommened something like "Add username's file", so let's go with that, but make sure to put your own username instead of mine. <pause 5> 

Let's now add a descriptive comment to the body of the pull reuqest. Maybe something like, "This pull reuqest adds a-a-ron's file to the _posts folder" Make sure to replace my username with your username <pause 3> Now that you have a title and a descriptive body to your pull request, you're ready to click the green "Create pull request" button.

Step #7: Respond to a review

You'll now see a new comment from github-learning-lab asking you to add some different content to your file. You need to replace line 5 of your file, the one that just said "your text" with a quotation or meme and witty caption. 

To edit your file, you'll need to click on the "files changed" tab in this pull request located just above the first comment. Once there, find the pencil icon located at the top right of the file changes.<pause 3> Clicking on that icon will bring you back to the edit page we saw ealier. Change line 5, with a quotation, meme, or comment. Now, I'm a big fan of boxing so feel free to add anything, but i'm going to add a quote from a boxing legend. <pause 5> 

Once done, scroll to the bottom of the page and add a commit message. <pause 5 - Add Muhammad Ali quote> and then commit your changes. You can now navigate back to the conversation tab at the top to see your next instructions <pause 3>. 


Step #8: Merge your pull request

Nice! You have now successfuly created your first pull request and can now merge it into the master branch. This is done by clicking the green "merge pull request" button at the bottom of the page. Doing so will then ask you to confirm this merge. Once done you can then delete this branch since it is now part of the master branch. 

Congratulations! You have now completed the Introduction to GitHub course, on GitHub Learning Lab! You used the GitHub flow to create a branch, make a commit, open a pull request, make an additional commit based on peer review from GitHub-learning-lab, and then merged your branch to incorporate your changes into the master branch. You also worked with issues and learned how they can be helpful in starting discussions and assisting pull requests. 

Now that you're done, you can now view your changes on your github pages site. Click the link provided in the last github-learning-lab response.<pause 3> If you click the right arrow key you can see the quote or comment you added to your file. You can now navigate back to the Introduciton to GitHub progress page on GitHub-learning-lab to see your completed progress. <pause 2> 


Closing

I hope this course is only one of many steps in your journey to learn how to use Git and GitHub. There is so much more to learn and do when leaening Git and GitHub, so make sure to check out the other GitHub learning Lab courses located in the courses tab. You're now one step closer to becoming a Git and GitHub master. Thanks for watching, and Happy learning!







