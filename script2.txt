Course Outline

Introduction to GitHub - Get Started with GitHub in less than an hour!

TL;DR - Use the GitHub flow to create branches, make commits, and introduce changes with Pull Requests. Mange communications in issues and manage GitHub notifications. 

Title Card: Use the Learn starting card with the Learn logo and titles. Walkthrough: Introduction to GitHub.

Introduction:

Hi! Welcome to this walkthrough video on the Introduction to GitHub course on GitHub Learn! If you're looking for a quick and fun introduction to GitHub, well, you've found it. In this course, you'll learn what GitHub is and why it's so powerful. You'll learn how to perform some important actions to become familiar with GitHub by actually using Github. In this course, you'll learn and use the GitHub flow to create branches, make commits, and introduce changes by using pull requests. You'll also learn how to use issues for discussions and collaboration. 

People around the world use GitHub to collaborate and contribute on projects ranging from software, to policy documents and even cookbooks. You can share you projects with the world and invite your friends to help, or you can keep your projects private and still have easy access wherever you are. GitHub is used to build some of the most powerful applications in the world. It can do a lot of really cool things, but this course will focus on getting you started with the basics. So, let's dig into issues, collaborate with branches, and change code on GitHub by using the GitHub flow. So, let's take a minute to understand what the GitHub flow is.

GitHub Flow:

1) The flow starts by creating a branch off of master. When you create a branch in your project, it's copying that project from that point in time into a parallel enrionment where you can try out new ideas and introduce changes without affecting the "master" branch. 

** add callout note saying that branch names should be descriptive to others know what the feature branch is **

2) After the branch has been created, the next step is to make the changes you want to incorporate into the master branch by making a "commit". A commit can be made by adding, modifying, or deleting content contained in the project's files. When making a commit you also add a commit message as a brief summary of what changes have occured. A commit can just be one small change, or it can be several changes grouped together in one commit. However, as a best practice, it's usually better to make lots of smaller commits instead of fewer commits with lots of changes. You'll understand why in just a second. 

3) Once you're satisfied with the commits you've made, it's time to open a pull request. A pull request is saying that you're wanting to incorporate your commit changes from this feature branch into the master branch. Creating a pull request is also inviting other collaboraters to discuss and review the commits you've made. Which, brings us to the next step in the GitHub flow.

4) With the opening of a pull request, disscussion and review of your commits can now take place. For those reviewing your commits, they have full visibility to the changes you're making, and can comment to the pull request generally, or can get as granular as commenting on a specific line of code or content change in each file. This is a great way to insure that these commits are following project guidelines or any specific coding styles. You can then make new commits based off discussions and comments given. It's very common to see back and forth comments and commits after a pull request has been opened. It's also much easier for someone to review small changes being introduced in multip[le commits instead of lots of changes in one commit. 

After you're satisifed with your pull request and it's been reviwed and has passed any tests, it's time to deploy your changes and verify them in production. If for some reason your changes cause issues, you can always revert back by deploying the existing master back into production. 

If everything checks out and your changes are verified in production, you can merge your feature branch into the master branch. When merged, your pull request makes a merge commit which preserves a historical record of that action on the master branch. This merge commit is similar to a commit you made in your feature branch by recording the changes made for that commit, but it's a commit on the master branch that references the merge of this pull request. Becasue all of these commits are searchable, Git is very transparent when understanding the history of a project. 

And that's the GitHub flow! It's pretty simple but very efficent. Now that we understand the GitHub flow, let's dive into this course with a hands-on approach and see how the GitHub flow works in action. To first get started, let's navigate to the Introduction to GitHub course homepage where we can register for the course. 

<Show Introduction to Github main page> SCREENFLOW

You'll notice a couple green buttons to register for the course. It doesn't matter which one you click, so feel free to click either one. <pause 3 sec>. Once clicked, you'll see a popup window appear on your screen. GitHub Learn will need to create a new repository on your GitHub account. This repository will be the "Introduction to Github" course. You have the option to make this repository public or private. For this course, making the repository public is the most common approach, but you do have the option to make it private. Note that making the repository private requires a paid GitHub account. 

Once you've chosen your option, you'll be directed to the Introduction to GitHub course steps page. A green "Success" notification should appear at the top of your page to let you know that you've registered for the course and that a new repository has been created.  You'll also notice that the course steps to complete this course are listed on this page. There is also a "next step" section toward the top right of your screen to let you know that next step that needs to be completed. Our next step is to "Assign the first issue to yourself". Let's click on the "assign yourslef" step, either in the course steps or located in the "next step" box. 

Step #1: Assign yourself 

You should now be re-directed to an "issue" in your newely created "github-slideshow" repository under your github profile name. An issue can be opened to have a discussion or collaborate on anything related to this repository. Keep in mind that issues are only discussions, they do not modify the contents of a file or files inside your repository. Discussions can start out as issues and then be linked to a Pull request where the changes are actually made. In this course, we'll be navigating frequently between issues (the instructions and discussions) and pull requests (the actual changes being made), so getting used to this format is helpful in completing this course. Our friendly bot will help us along the way by giving instructions and providing feedback to our actions. Let's get started!

The first thing we see is a "Welcome to Introduction to GitHub". This is great! we've now begun our journey to learn GitHub by using GitHub. Earlier, we breiefly learned what GitHub is and how it can be useful. If you click on the expandable dialogue arrow of "What is GutHub", we get a little more information and a very cool video to watch at the bottom if you're wanting even more. For now, it's important to know that GitHub is a collaboration platform built upon Git which is the distributed version control software that tracks every change we make to our project. 

Below this, we see another expandable dialogue arrow for Issues where we get a litte more information on how issues can be used as well as another video to learn more about issues. 

Below that, we have one more expandable dialogue for managing notifications. Once you've commented on an issue or pull request, email notifications will start to pour in. By default, notifications will be sent by email to any activity in the thread. This can be helpful but can quickly become overwhelming. You can silence or unmute notifications of individual issues and pull requests. You can customize notifications in settings by going to your profile icon and click Settings then notifications. You can also choose to receive notificaionts from a repository by watching, not watching, or ignoring notifications. You can then review notifications for the repositories you are already watching. As with the other sections, there is a video for addtional information on notifications if you want to learn more.

Scrolling down we see our first task of assigning this issue to ourselves. By assigning ourselves to an issue or pull request, we're telling other collaboraters that we'll be managing this discussion or code change. Let's assign outselves to this issue. If we scroll up to the right side of the screen, under the assignees section, let's click on "assign yourself". You should now see your username and profile picture appear. Let's now scroll down to the bottom of the issue and refresh the page. You should now see a new response from out friendly bot letting us know that we are now the proud manager of this issue.


Step #2: Turn on GitHub Pages

Our next task is to turn on GitHub pages. GitHub pages is a technology that allows you to serve a static web site from a repository. We've already filled this repository with some fun website content, but the rendered site isn't visible from anywhere right now. So, let's change that. 

We can do this by going to the "settings" tab for the repository by clicking the link in the comment of this issue, or by scrolling up to the top of the page and clicking on the "settings" tab. Once there, scroll down to the section that says "GitHub Pages" and under the "Source" dropdown, select the "Master branch" and then click the "save" button. Once done, let's now return to the issue for more instructions. Scrolling down we now see that our friendly bot has confirmed that GitHub pages is now turned on for this repository and we can now visit our website that is now visible to the public.  

Step #3: Close an Issue

We have completed all the steps in this issue so we can now close it. We can do this by clicking the "close issue" button located at the bottom of the issue. 

We now get another message from the helper bot notifying us that this issue thread has been compelted and to head on over to the next issue for more instructions. Let's click on the "next issue" hyperlink to take us to the next issue. 


Step #4: Create a branch

We've now be brought to the second issue where the helper bot has provided some new instructions for our next step. Now that we're familair with working with issues. It's time to put our knowelege of the GitHub flow to the test. In this step, we'll be creating a branch from our project. Remember, a branch is a complete copy of our project that allows us to test out new ideas or make changes to our project withough affecting the "master" branch of the project in the process. Keep in mind that we'll be navigating between our issues with the helper bot, where the instructions are,  and our soon to be created pull request, where the actual changes will be made. 

Our next step is to create a branch. Let's navigate to the code tab at the top left of the page. Now that we're on the code page, we see a list of folders and files inside our repository. To create a new branch, locate the "branch" dropdown button just above the folders and files. Our branch says "master". This is the branch we are currently checked out on. To create a new branch, click on the button to bring up the text field. In this field, type the name of the branch you want to create. It's usually good practice to name your branch in relation to the changes will you be making. In our case, let's just call our branch. "my-first-branch" and then hit enter. <pause 5>

You should now see a notification appear at the top of the page that says "branch created". You'll also noticed that in the branch button, it now says "my-first-branch" instead of master. 

Let's now navigate back over to our issue for futher instructions. We can do this by clicking on the "issues" tab next to the code tab. <pause 5> Click on the issue that says, "your first contribution" to open up that issue. <pause 5> If we scroll down to the bottom of page we now see that the helper bot has sent us a new comment. Congratulations on creating your first branch!

Step #5: Commit a file

Now that our branch has been created, we can use it to make modifications to our project without changing the deployed or "master" branch. If you remembner from the GitHub flow, the next step after creating a branch is to make a commit. Let's create a new file and commit it to our branch. On step 2 of our new instructions, copy the file name as shown. It starts with the "_posts" and ends with the ".md". Yours will be a bit different than mine, becasue yours will have your username instead of a-a-ron, which is mine. We'll use this in just a minute.

To create our file, let's scroll back up to the top of the page and click on the "code" tab again. In the branch dropdown-menu button, change master to the name of our branch, "my-first-branch". To the right of this button, you'll see another button that says "create new file". Let's click on this button to add a new file to our branch. <pause 3> Next to the github-slideshow repository name, you'll see a text field where we can add the file name that we want created. Following the instructions in the issue, we need to create a file in the "_posts" folder. Let's now paste that file name path that we just copied. 

Let's now add the following content to the body of out file. On line 1 and 2, type 3 dashes, and on line 3, type "your text". <pause 5>
Let's now commit these changes to our branch. We can do this by scrolling down to the bottom of the page where it says Commit new file. the first text box, is our commit message. This isa breif description of the changes being made in this commit. Let's type "Add" and then the name of your file <pause 8>. We want to make sure we're commiting to our "my-first-branch" and not the master branch. Let's now click on the green "commit new file" button. 

Step #6: Open a pull request

We're now taken back to the code tab where we see a new notification appear. We see that our branch, "my-first-branch" has a green button that says" Compare and pull request". This means that we've committed someting to this branch, and that we can now open a pull request to incorporate these changes into the master branch. But before we do so, let's go back to our issue to see our next instructions from the helper bot. Let's click on the issues tab, and then the issue titled "your fist contribution". Scrolling down to the bottom of the page we have a new comment from the helper bot. Awesome, we've successfully made a commit on our branch! Our next instructions are to open a pull request, give it a name, a description, and then click the "create pull request" button. Our helper bot also mentioned that once we create our pull reuqest, it will close this issue and communicate with us over there. Alright, let's create our first pull request.

Let's go back to the code tab and click the "new pull reuqest" button. <pause 5> Under the compare changes section, make sure the "base" branch is on master, and that the compare: branch says our branch name. Let's change our compare branch to say "my-first-branch".

Let's now give our pull request a title. The insructions recommened something like "Add username's file", so let's go with that, but make sure to put your own username instead of mine. <pause 5> 

Let's now add a descriptive comment to the body of the pull reuqest. Maybe something like, "This pull reuqest adds a-a-ron's file to the _post folder. now, make sure to replace my username with your username <pause 3> Now that we have a title and a descriptive body to our pull request, we're ready to click the "Create pull request" button.

Step #7: Respond to a review

We now see a new comment from our helper bot asking us to add some different content to our file. We need to replace line 3, the one that just said "your text" with a quotation or meme and witty caption. 

To edit our file, we need to click on the "files changed" tab in this pull request. Once there, find the pencil icon located at the top right of the file changes. Clicking on that icon will bring you back to the edit page we saw ealier when we first added this file's contents. Let's now change line 3, with the instructed content. We were asked to input a quotation or a meme and comment. I'm a big fan of boxing so let's add a quote from a boxing legend. <pause 5> Remember, markdown is supported, so let's put the name in bold. 

Let's now scroll to the bottom of the page and add a commit message. <pause 5 - Add Muhammad Ali quote> and then commit our changes. Let's go back to our conversation tab to see our next instructions <pause 3>. 


Step #8: Merge your pull request

Nice! You have now successfuly created your first pull request and can now merge it into the master branch. This is done by clicking the "merge pull request" button at the bottom of the page. Doing so will then ask us to confirm this merge. Once done we can then delete this branch since it is now part of the master branch. 

Congratulations! You have now completed the Introduction to GitHub course, on GitHub Learn! You used the GitHub flow to create a branch, make a commit, open a pull request, make an additional commit based on peer review, and then merged your branch to incorporate your changes into the master branch. You also worked with issues and learned how they can be helpful in starting discussions and assisting pull requests. 

Now that we're done, we can now view our changes on our github pages site. Let's click the link provided in the last helpful bot comment.<pause 3> If we hit the right arrow key we can see the quote we added to our file.    










